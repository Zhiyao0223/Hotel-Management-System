/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.javaassignment;

import java.awt.List;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.RowFilter;
import javax.swing.RowSorter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import javax.swing.table.TableModel;
import javax.swing.text.TableView.TableRow;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author USER
 */
public class Booking extends javax.swing.JFrame {

    /**
     * Creates new form ManageRoom
     */
    private boolean displayStatusl;
    public Booking() {
        initComponents();
        displayStatusl = false;
        receipt.setVisible(false);
        DefaultTableModel model = (DefaultTableModel) bookingTable.getModel();
        TableRowSorter sorter = new TableRowSorter<>(model);
        bookingTable.setRowSorter(sorter);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        displayTypeGroup = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        backBtnManageRoom = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        bookingTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        displayButton = new javax.swing.JButton();
        searchFilter = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        booking = new javax.swing.JRadioButton();
        Customer = new javax.swing.JRadioButton();
        editBtn = new javax.swing.JButton();
        deleteBtn = new javax.swing.JButton();
        receipt = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 204));
        jPanel1.setPreferredSize(new java.awt.Dimension(380, 600));

        backBtnManageRoom.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        backBtnManageRoom.setText("< Back");
        backBtnManageRoom.setOpaque(false);
        backBtnManageRoom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnManageRoomActionPerformed(evt);
            }
        });

        bookingTable.setFont(new java.awt.Font("Tw Cen MT", 0, 18)); // NOI18N
        bookingTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        bookingTable.setAutoCreateRowSorter(true);
        bookingTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        bookingTable.setIntercellSpacing(new java.awt.Dimension(5, 5));
        bookingTable.setRowHeight(25);
        jScrollPane1.setViewportView(bookingTable);

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel1.setText("Booking Record");

        displayButton.setFont(new java.awt.Font("Tw Cen MT", 0, 18)); // NOI18N
        displayButton.setText("Show");
        displayButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayButtonActionPerformed(evt);
            }
        });

        searchFilter.setFont(new java.awt.Font("Tw Cen MT", 0, 18)); // NOI18N
        searchFilter.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        searchFilter.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchFilterKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                searchFilterKeyTyped(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel2.setText("Search:");

        displayTypeGroup.add(booking);
        booking.setFont(new java.awt.Font("Tw Cen MT", 0, 18)); // NOI18N
        booking.setText("Booking");
        booking.setOpaque(false);
        booking.setSelected(true);

        displayTypeGroup.add(Customer);
        Customer.setFont(new java.awt.Font("Tw Cen MT", 0, 18)); // NOI18N
        Customer.setText("Customer");
        Customer.setOpaque(false);
        Customer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CustomerActionPerformed(evt);
            }
        });

        editBtn.setFont(new java.awt.Font("Tw Cen MT", 0, 18)); // NOI18N
        editBtn.setText("Edit");
        editBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editBtnActionPerformed(evt);
            }
        });

        deleteBtn.setFont(new java.awt.Font("Tw Cen MT", 0, 18)); // NOI18N
        deleteBtn.setText("Delete");
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });

        receipt.setFont(new java.awt.Font("Tw Cen MT", 0, 18)); // NOI18N
        receipt.setText("View Receipt");
        receipt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                receiptActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(backBtnManageRoom)
                        .addGap(427, 427, 427)
                        .addComponent(jLabel1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(52, 52, 52)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1164, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(searchFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(booking)
                                .addGap(27, 27, 27)
                                .addComponent(Customer)
                                .addGap(26, 26, 26)
                                .addComponent(displayButton)
                                .addGap(16, 16, 16)))))
                .addContainerGap(34, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(290, 290, 290)
                .addComponent(editBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(receipt)
                .addGap(168, 168, 168)
                .addComponent(deleteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(272, 272, 272))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(backBtnManageRoom, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addComponent(jLabel1)))
                .addGap(65, 65, 65)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(displayButton, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(searchFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2)
                        .addComponent(booking)
                        .addComponent(Customer)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 377, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 57, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deleteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(editBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(receipt, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1250, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 700, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void backBtnManageRoomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnManageRoomActionPerformed
        // TODO add your handling code here:
        Homepage bookss = new Homepage();
        bookss.show();
        dispose();
    }//GEN-LAST:event_backBtnManageRoomActionPerformed

    private void displayButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayButtonActionPerformed
        // TODO add your handling code here:
        displayStatusl = true;
        searchFilter.setText("");
        String file = "", line = "";
        String[] header;
        
        int arrayMaxSize = 0;
        
        if (booking.isSelected()) {
            receipt.setVisible(true);
            file = "booking.txt";
            arrayMaxSize = 6;
            String[] bookingHeader = {"Customer ID", "Room Type", "Room No","Check In Date", "Check Out Date", "Total Price"};
            header = bookingHeader;
        }
        else if (Customer.isSelected()) {
            receipt.setVisible(false);
            file = "customer.txt";
            arrayMaxSize = 5;
            String[] customerHeader = {"Customer ID", "Customer Name", "Email Address", "Contact Number", "Identity Card No"};
            header = customerHeader;
        }
        else {
            JOptionPane.showMessageDialog(null, "New bug is dicovered~");
            return;
        }
        // Initialise var
        String[] lineArray = new String[arrayMaxSize];
        
        File scanFile = new File(file);
                
        // Insert data into table
        bookingTable.setModel(new DefaultTableModel());
        DefaultTableModel model = (DefaultTableModel)bookingTable.getModel();
        JTable temp;
        int lineCounter = 0;
        try {
            File f2 = new File("booking.txt");
            Scanner detectLength = new Scanner(f2);
            while(detectLength.hasNextLine()) {
                detectLength.nextLine();
                lineCounter+= 1;
            }
            detectLength.close();
        } 
        catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error: " + e);
        }
     
        // Store file line by line into 2d array
        Object[][] data = new Object[lineCounter][arrayMaxSize];
//        Object[][] tmp = new Object[lineCounter][arrayMaxSize];
        try {
            Scanner s = new Scanner(scanFile);
            DefaultTableModel model1 = (DefaultTableModel)bookingTable.getModel();
            int i = 0;
            while (s.hasNextLine()) {
                line = s.nextLine();
                lineArray = line.split("\t");

                data[i] = lineArray;
                i++;
            }
            s.close();
        } 
        catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error: " + e);
        } 

        for (int i = 0; i < arrayMaxSize; i++) {
            model.addColumn(header[i]);
        }
        
        int j = 0;
        for(Object[] datas: data) {
            model.addRow(datas);
        }
    }//GEN-LAST:event_displayButtonActionPerformed

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
        // TODO add your handling code here:
        int rowNo = bookingTable.getSelectedRow() + 1;
        if(rowNo != 0) {
            String confirmation = "Confirm Delete Row " + String.valueOf(rowNo) + " ?";
            int input = JOptionPane.showConfirmDialog(null, confirmation);
            
            if (input == 0) {
                // Delete from file
                String file;
                if (booking.isSelected()) {
                    file = "booking.txt";
                }
                else if (Customer.isSelected()) {
                    file = "customer.txt";
                }
                else {
                    JOptionPane.showMessageDialog(null, "New bug is dicovered~");
                    return;
                }
                
                File scans = new File(file);
                int totalLine = 0;
                try{
                    Scanner countLine = new Scanner(scans);
                    while(countLine.hasNextLine()) {
                        totalLine++;
                        countLine.nextLine();
                    }
                    countLine.close();
                }
                catch(Exception e) {
                    JOptionPane.showMessageDialog(null, "Bug in counting total line of files~");
                }
                
                
                String[] fileLine = new String[totalLine-1];
                int lineCounter = 0;
                try {
                    Scanner s = new Scanner(scans);
                    while(s.hasNextLine()) {
                        if ((rowNo-1) == lineCounter) {
                            s.nextLine();
                            continue;
                        }
                        fileLine[lineCounter] = s.nextLine();
                        lineCounter++;
                    }
                     s.close();
                } 
                catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "New Issue at text files weh");
                }
                        
                try {
                    File delete = new File(file);
                    delete.delete();
                    PrintWriter pw = new PrintWriter(file);
                    for (int i = 0; i < fileLine.length; i++) {
                        if(i != 0) {
                            pw.append("\n");
                        }
                        pw.append(fileLine[i]);
                    }
                    
                    
                    pw.close();
                } 
                catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Error in writing file: " + e);
                }
               
                
                DefaultTableModel model = (DefaultTableModel)bookingTable.getModel();
                // remove selected row from the model
                model.removeRow(bookingTable.getSelectedRow());
                JOptionPane.showMessageDialog(null, "Selected row deleted successfully");
            }

        }
        
    }//GEN-LAST:event_deleteBtnActionPerformed

    private void editBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editBtnActionPerformed
        // TODO add your handling code here:
        int rowNo = bookingTable.getSelectedRow() + 1;
        if(rowNo != 0) {
            int column = bookingTable.getColumnCount();
            int row = bookingTable.getSelectedRow();
            
            String[] rowData = new String[column];
            for (int i = 0; i < column; i++) {
                rowData[i] = bookingTable.getModel().getValueAt(row, i).toString();
            }
            
            // Get file name
            if (booking.isSelected()) {
                ModifyBooking edit = new ModifyBooking(rowData, row);
                edit.show();
                dispose();
            }
            else if (Customer.isSelected()) {
                ModifyCust edit1 = new ModifyCust(rowData);
                edit1.show();
                dispose();
            }
            else {
                JOptionPane.showMessageDialog(null, "New bug is dicovered~");
            }
            
   
        }
    }//GEN-LAST:event_editBtnActionPerformed

    private void CustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CustomerActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_CustomerActionPerformed

    private void receiptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_receiptActionPerformed
        // TODO add your handling code here:
        int rowNo = bookingTable.getSelectedRow() + 1;
        if(rowNo != 0) {
            int column = bookingTable.getColumnCount();
            int row = bookingTable.getSelectedRow();
            
            String[] rowData = new String[column];
            for (int i = 0; i < column; i++) {
                rowData[i] = bookingTable.getModel().getValueAt(row, i).toString();
            }
            
            // Get file name
            ReceiptPage receiptPage = new ReceiptPage(rowData);
            receiptPage.show();
            dispose();
        }
    }//GEN-LAST:event_receiptActionPerformed

    
    private void searchFilterKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchFilterKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_searchFilterKeyTyped
    
    private void filter(String query) {
        DefaultTableModel model = (DefaultTableModel) bookingTable.getModel();
        TableRowSorter <DefaultTableModel> tr = new TableRowSorter<DefaultTableModel>(model);
        bookingTable.setRowSorter(tr);
        tr.setRowFilter(RowFilter.regexFilter(query));
    }
    
    
    private void searchFilterKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchFilterKeyReleased
        // TODO add your handling code here:
        if (!displayStatusl) {
            JOptionPane.showMessageDialog(null, "No table is chosen");
            searchFilter.setText("");
            return;
        }
        String text = searchFilter.getText();
        filter(text);
        // Dynamic search 
        // Reference: https://stackoverflow.com/questions/22066387/how-to-search-an-element-in-a-jtable-java
//        TableRowSorter sorter = new TableRowSorter<>(bookingTable.getModel());
//        
////        System.out.println(text);
//
//        if (text.length() == 0) {
//           sorter.setRowFilter(null);
//        } else {
//           sorter.setRowFilter(RowFilter.regexFilter(text, 0));
//        }
    }//GEN-LAST:event_searchFilterKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Booking.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Booking.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Booking.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Booking.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Booking().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton Customer;
    private javax.swing.JButton backBtnManageRoom;
    private javax.swing.JRadioButton booking;
    private javax.swing.JTable bookingTable;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JButton displayButton;
    private javax.swing.ButtonGroup displayTypeGroup;
    private javax.swing.JButton editBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton receipt;
    private javax.swing.JTextField searchFilter;
    // End of variables declaration//GEN-END:variables
}
