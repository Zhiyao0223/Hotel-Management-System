/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.javaassignment;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.PrintWriter;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.Scanner;
import java.util.TimeZone;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author USER
 */
public class AddBooking extends javax.swing.JFrame {

    /**
     * Creates new form AddBooking
     */
    boolean displayStatuss;
    public AddBooking() {
        initComponents();
        displayStatuss = true;
        roomNoCombo.removeAllItems();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        roomTypeGroup = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        custID = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        custName = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        seaRadio = new javax.swing.JRadioButton();
        jungleRadio = new javax.swing.JRadioButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        checkInDate = new com.toedter.calendar.JDateChooser();
        jButton2 = new javax.swing.JButton();
        resetBtn = new javax.swing.JButton();
        checkOutDate = new com.toedter.calendar.JDateChooser();
        jLabel8 = new javax.swing.JLabel();
        priceBox = new javax.swing.JTextField();
        roomNoCombo = new javax.swing.JComboBox<>();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 204));
        jPanel1.setInheritsPopupMenu(true);

        jButton1.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jButton1.setText("< Back");
        jButton1.setOpaque(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Trebuchet MS", 1, 24)); // NOI18N
        jLabel1.setText("Add Booking ");

        jLabel2.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel2.setText("Customer ID");

        custID.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        custID.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                custIDFocusLost(evt);
            }
        });
        custID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                custIDActionPerformed(evt);
            }
        });
        custID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                custIDKeyTyped(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel3.setText("Customer Name");

        custName.setEditable(false);
        custName.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        custName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                custNameActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel4.setText("Room Type");

        roomTypeGroup.add(seaRadio);
        seaRadio.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        seaRadio.setText("Seaview");
        seaRadio.setOpaque(false);
        seaRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seaRadioActionPerformed(evt);
            }
        });

        roomTypeGroup.add(jungleRadio);
        jungleRadio.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jungleRadio.setText("JungleView");
        jungleRadio.setOpaque(false);
        jungleRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jungleRadioActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel5.setText("Room Number");

        jLabel6.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel6.setText("Check In Date");

        jLabel7.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel7.setText("Check Out Date");

        checkInDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                checkInDateFocusLost(evt);
            }
        });
        checkInDate.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                checkInDatePropertyChange(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jButton2.setText("Save");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        resetBtn.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        resetBtn.setText("Reset");
        resetBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetBtnActionPerformed(evt);
            }
        });

        checkOutDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                checkOutDateFocusLost(evt);
            }
        });
        checkOutDate.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                checkOutDatePropertyChange(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel8.setText("Price (RM)");

        priceBox.setEditable(false);
        priceBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                priceBoxActionPerformed(evt);
            }
        });

        roomNoCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        roomNoCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roomNoComboActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 51, 51));
        jLabel10.setText("*");

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 51, 51));
        jLabel11.setText("*");

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 51, 51));
        jLabel12.setText("*");

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(255, 51, 51));
        jLabel13.setText("*");

        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(255, 51, 51));
        jLabel14.setText("*");

        jLabel15.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(255, 51, 51));
        jLabel15.setText("*");

        jLabel16.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(255, 51, 51));
        jLabel16.setText("*");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1)
                .addGap(463, 463, 463)
                .addComponent(jLabel1)
                .addGap(451, 451, 451))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(112, 112, 112)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel11))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel13))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel12))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel10)))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(seaRadio, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jungleRadio, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(checkInDate, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(custID, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel5)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jLabel16))
                                .addComponent(jLabel7)
                                .addComponent(resetBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel14)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(custName, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel15)
                                .addGap(27, 27, 27)
                                .addComponent(checkOutDate, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(priceBox, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(roomNoCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(50, 50, 50))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(62, 62, 62)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(custID, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(custName, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(69, 69, 69)
                        .addComponent(jLabel10))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(71, 71, 71)
                        .addComponent(jLabel14)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(62, 62, 62)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(checkOutDate, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(checkInDate, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(74, 74, 74)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel11)
                            .addComponent(jLabel6)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(73, 73, 73)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel15)
                            .addComponent(jLabel7))))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(61, 61, 61)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel4)
                                .addComponent(seaRadio, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jungleRadio, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGap(4, 4, 4)
                                    .addComponent(jLabel16))
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(roomNoCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(69, 69, 69)
                        .addComponent(jLabel12)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(63, 63, 63)
                        .addComponent(jLabel13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 80, Short.MAX_VALUE)
                        .addComponent(resetBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(62, 62, 62))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(priceBox, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(37, 37, 37)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 51, 51));
        jLabel9.setText("*");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jLabel9)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jLabel9)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        displayStatuss = false;
        Homepage homeBooking = new Homepage();
        homeBooking.show();
        dispose();
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        // Initialise string array to store data

        String[] bookingData = new String[6];
        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        // Customer ID
        bookingData[0] = custID.getText();
        if (bookingData[0] == null || bookingData[0].equals("")) {
            JOptionPane.showMessageDialog(null, "Customer ID cannot leave empty");
            return;
        }

        // Room ID
        bookingData[2] = roomNoCombo.getSelectedItem().toString();
        if (bookingData[2] == null || bookingData[2].equals("")) {
            JOptionPane.showMessageDialog(null, "Room Number cannot leave empty");
            return;
        }

        // Check In Date
        Date checkIn = checkInDate.getDate();
        if (checkIn == null) {
            JOptionPane.showMessageDialog(null, "Check In Date cannot leave empty");
            return;
        }
        bookingData[3] = dateFormat.format(checkIn);


        // Check Out Date
        Date checkOut = checkOutDate.getDate();
        if (checkOut == null) {
            JOptionPane.showMessageDialog(null, "Check Out Date cannot leave empty");
            return;
        }
        bookingData[4] = dateFormat.format(checkOut);  ;

        // Room type
        if (seaRadio.isSelected()) {
            bookingData[1] = "seaview";
        }
        else if (jungleRadio.isSelected()) {
            bookingData[1] = "jungle";
        }
        else {
            JOptionPane.showMessageDialog(null, "Please select a room type!");
            return;
        }

        // Price
        bookingData[5] = priceBox.getText();

        // Append data into text file
        try {
            PrintWriter pw = new PrintWriter(new FileOutputStream(new File("booking.txt"), true));
            pw.append("\n");
            for (int i = 0; i < 6; i++) {
                if (i != 0) {
                    pw.append("\t");
                }
                pw.append(bookingData[i]);
            }

            pw.close();
            JOptionPane.showMessageDialog(null, "Record Added!");

            // Redirect back to homepage
            Homepage home = new Homepage();
            home.show();
            dispose();

        }
        catch(Exception e) {
            JOptionPane.showMessageDialog(null, "Error: " + e);
        }
                   
    }//GEN-LAST:event_jButton2ActionPerformed

    private void priceBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_priceBoxActionPerformed

    }//GEN-LAST:event_priceBoxActionPerformed

    private void custNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_custNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_custNameActionPerformed

    private void custIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_custIDActionPerformed
        // TODO add your handling code here:

        
    }//GEN-LAST:event_custIDActionPerformed

    private void custIDFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_custIDFocusLost
        // TODO add your handling code here:
        if (!displayStatuss) {
            return;
        }
        String inputUserID = custID.getText();
        if (inputUserID.equals("") || inputUserID == null) {
            JOptionPane.showMessageDialog(null, "UserID cannot be empty!");
            return;
        }
        
        try {
            String[] dataArray;
            String line;
            File cust = new File("customer.txt");
            Scanner s = new Scanner(cust);
            
            while (s.hasNextLine()) {
                line = s.nextLine();
                dataArray = line.split("\t");
//                System.out.println(line + " " + inputUserID);
                if (dataArray[0].equals(inputUserID)){
                    custName.setText(dataArray[1]);
                    return;
                }
            }
            JOptionPane.showMessageDialog(null, "Invalid UserID");
            custID.setText("");
            custName.setText("");
        }
        catch(Exception e) {
            JOptionPane.showMessageDialog(null, "Error: " + e);
        }
    }//GEN-LAST:event_custIDFocusLost

    private void roomNoComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roomNoComboActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_roomNoComboActionPerformed

    // For combobox use
    public void ComboItem(String value, String label) {
        
    }
        
    
    private void seaRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seaRadioActionPerformed
        // TODO add your handling code here:
        roomNoCombo.removeAllItems();
        Date checkInDates = checkInDate.getDate();
        Date checkOutDates = checkOutDate.getDate();
        
        Date today = new Date();
        boolean valid = true;
        
        if (checkOutDates != null) {
            long diffMillies = Math.abs(checkOutDates.getTime() - today.getTime());
            long diffs = TimeUnit.DAYS.convert(diffMillies, TimeUnit.MILLISECONDS);
            
            if ((checkOutDates.compareTo(today)) <= 0) {
                JOptionPane.showMessageDialog(null, "Invalid Date");
                valid = false;
            }


            if (!valid) {
                checkOutDate.setCalendar(null);
                return;
            }
        }
        
        
        if (checkInDates != null && checkOutDates != null && roomTypeGroup.getSelection() != null){
            if (checkOutDates.compareTo(checkInDates) < 0) {
                JOptionPane.showMessageDialog(null, "Check out date cannot smaller than check in date.");
                checkOutDate.setCalendar(null);
                return;
            }
            else if (checkInDates.compareTo(today) <= 0) {
                JOptionPane.showMessageDialog(null, "Check In date cannot be today.");
                checkInDate.setCalendar(null);
                return;
            }
            
            roomNoCombo.removeAllItems();
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            String inString = sdf.format(checkInDates);
            String outString = sdf.format(checkOutDates);
//            System.out.println(inString + " " + outString);
            long diffInMillies = Math.abs(checkOutDates.getTime() - checkInDates.getTime());
            long diff = TimeUnit.DAYS.convert(diffInMillies, TimeUnit.MILLISECONDS);
            
            String price = df.format(((diff * 350.00) * 110 / 100) + (diff * 10));
            priceBox.setText(price);
            
            // Check filter
            String filter = "";
            if (seaRadio.isSelected()) {
                filter = "seaview";
            }
            else if (jungleRadio.isSelected()) {
                filter = "jungle";
            }
            else {
                JOptionPane.showMessageDialog(null, "Error weh");
            }
            
            // Check available room
            try {
                File room = new File("room.txt");
                File booking = new File("booking.txt");
                Scanner sRoom = new Scanner(room);
                String line = "", lineBooking = "";
                boolean availableStatus = true;
                ArrayList <String> fileLines = new ArrayList <String>();
                
                while(sRoom.hasNextLine()) {
                    Scanner sBooking = new Scanner(booking);
                    line = sRoom.nextLine();
                    String[] arrayRoom = line.split("\t");
                    availableStatus = true;
                    
                    if (!(arrayRoom[0].equals(filter))) {
//                        System.out.println(arrayRoom[0] + " " + filter);
                        continue;
                    }
                    
                    while(sBooking.hasNextLine()) {
                        lineBooking = sBooking.nextLine();
                        String[] arrayBooking = lineBooking.split("\t");
                        
                        // CheckIn
                        Date fileDate = new SimpleDateFormat("yyyy-MM-dd").parse(arrayBooking[3]);  
                        Date fileCheckOutDate = new SimpleDateFormat("yyyy-MM-dd").parse(arrayBooking[4]); 
                        
                        if (arrayRoom[1].equals(arrayBooking[2])) {
                            // Check in compare
                            int diffInCheckIn = checkInDates.compareTo(fileDate);
                            int diffInCheckIn1 = checkOutDates.compareTo(fileDate);
                            
                            // Check out compare
                            int diffInCheckout = checkInDates.compareTo(fileCheckOutDate);
                            int diffInCheckOut1 = checkOutDates.compareTo(fileCheckOutDate);
                            
//                            System.out.println(arrayBooking[3] + " " + arrayBooking[4]);
//                            System.out.println(checkInDates + " " + fileDate + " " + checkOutDates + " " + fileCheckOutDate);
//                            System.out.println(diffInCheckIn + " " + diffInCheckIn1 +" " + diffInCheckout + " " + diffInCheckOut1 + "\n");
                            if (diffInCheckIn >= 0 && diffInCheckOut1 < 0){
//                                System.out.println(diffInCheckIn + " " + diffInCheckIn1);
                                availableStatus = false;
                                break;
                            }
                            else if (diffInCheckout < 0 && diffInCheckout < 0) {
                                availableStatus = false;
                                break;
                            }
                        }
                    }
                    if (availableStatus) {
                        fileLines.add(arrayRoom[1]);
                    }
                    sBooking.close();
                }
                sRoom.close();
                
                for (String lineIndex : fileLines) {
                    roomNoCombo.addItem(lineIndex);
                }
            } 
            catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Error: " + e);
            }

  
            
        }
    }//GEN-LAST:event_seaRadioActionPerformed

    private void checkInDateFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_checkInDateFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_checkInDateFocusLost

    private void checkOutDateFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_checkOutDateFocusLost
        // TODO add your handling code here:        
    }//GEN-LAST:event_checkOutDateFocusLost

    private static final DecimalFormat df = new DecimalFormat("0.00");
    
    private void checkOutDatePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_checkOutDatePropertyChange
        // TODO add your handling code here:
        Date checkInDates = checkInDate.getDate();
        Date checkOutDates = checkOutDate.getDate();
        
        Date today = new Date();
        boolean valid = true;
        
        if (checkOutDates != null) {
            long diffMillies = Math.abs(checkOutDates.getTime() - today.getTime());
            long diffs = TimeUnit.DAYS.convert(diffMillies, TimeUnit.MILLISECONDS);
            
            if ((checkOutDates.compareTo(today)) <= 0) {
                JOptionPane.showMessageDialog(null, "Invalid Date");
                valid = false;
            }


            if (!valid) {
                checkOutDate.setCalendar(null);
                return;
            }
        }
        
        
        if (checkInDates != null && checkOutDates != null && roomTypeGroup.getSelection() != null){
            System.out.println(checkOutDates.compareTo(checkInDates));
            if (checkOutDates.compareTo(checkInDates) <= 0) {
                JOptionPane.showMessageDialog(null, "Check out date cannot smaller than check in date.");
                checkOutDate.setCalendar(null);
                return;
            }
            
            roomNoCombo.removeAllItems();
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
//            String inString = sdf.format(checkInDates);
//            String outString = sdf.format(checkOutDates);
//            System.out.println(inString + " " + outString);
            long diffInMillies = Math.abs(checkOutDates.getTime() - checkInDates.getTime());
            long diff = TimeUnit.DAYS.convert(diffInMillies, TimeUnit.MILLISECONDS);
            
            String price = df.format(((diff * 350.00) * 110 / 100) + (diff * 10));
            if (Double.valueOf(price) == 0) {
                JOptionPane.showMessageDialog(null, "Check out date cannot same with check in date.");
                checkOutDate.setCalendar(null);
                priceBox.setText("");
                return;
            }
            
            priceBox.setText(price);
            
            // Check filter
            String filter = "";
            if (seaRadio.isSelected()) {
                filter = "seaview";
            }
            else if (jungleRadio.isSelected()) {
                filter = "jungle";
            }
            else {
                JOptionPane.showMessageDialog(null, "Error weh");
            }
            
            // Check available room
            try {
                File room = new File("room.txt");
                File booking = new File("booking.txt");
                Scanner sRoom = new Scanner(room);
                String line = "", lineBooking = "";
                boolean availableStatus = true;
                ArrayList <String> fileLines = new ArrayList <String>();
                
                while(sRoom.hasNextLine()) {
                    Scanner sBooking = new Scanner(booking);
                    line = sRoom.nextLine();
                    String[] arrayRoom = line.split("\t");
                    availableStatus = true;
                    
                    if (!(arrayRoom[0].equals(filter))) {
//                        System.out.println(arrayRoom[0] + " " + filter);
                        continue;
                    }
                    
                    while(sBooking.hasNextLine()) {
                        lineBooking = sBooking.nextLine();
                        String[] arrayBooking = lineBooking.split("\t");
                        
                        // CheckIn
                        Date fileDate = new SimpleDateFormat("yyyy-MM-dd").parse(arrayBooking[3]);  
                        Date fileCheckOutDate = new SimpleDateFormat("yyyy-MM-dd").parse(arrayBooking[4]); 
                        
                        if (arrayRoom[1].equals(arrayBooking[2])) {
                            // Check in compare
                            int diffInCheckIn = checkInDates.compareTo(fileDate);
                            int diffInCheckIn1 = checkOutDates.compareTo(fileDate);
                            
                            // Check out compare
                            int diffInCheckout = checkInDates.compareTo(fileCheckOutDate);
                            int diffInCheckOut1 = checkOutDates.compareTo(fileCheckOutDate);
                            
//                            System.out.println(arrayBooking[3] + " " + arrayBooking[4]);
//                            System.out.println(checkInDates + " " + fileDate + " " + checkOutDates + " " + fileCheckOutDate);
//                            System.out.println(diffInCheckIn + " " + diffInCheckIn1 +" " + diffInCheckout + " " + diffInCheckOut1 + "\n");
                            if (diffInCheckIn >= 0 && diffInCheckOut1 < 0){
//                                System.out.println(diffInCheckIn + " " + diffInCheckIn1);
                                availableStatus = false;
                                break;
                            }
                            else if (diffInCheckout < 0 && diffInCheckout < 0) {
                                availableStatus = false;
                                break;
                            }
                        }
                    }
                    if (availableStatus) {
                        fileLines.add(arrayRoom[1]);
                    }
                    sBooking.close();
                }
                sRoom.close();
                
                for (String lineIndex : fileLines) {
                    roomNoCombo.addItem(lineIndex);
                }
            } 
            catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Error: " + e);
            }

  
            
        }
    }//GEN-LAST:event_checkOutDatePropertyChange

    private void jungleRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jungleRadioActionPerformed
        // TODO add your handling code here:
        roomNoCombo.removeAllItems();
                
        Date checkInDates = checkInDate.getDate();
        Date checkOutDates = checkOutDate.getDate();
        
        Date today = new Date();
        boolean valid = true;
        
        if (checkOutDates != null) {
            long diffMillies = Math.abs(checkOutDates.getTime() - today.getTime());
            long diffs = TimeUnit.DAYS.convert(diffMillies, TimeUnit.MILLISECONDS);
            
            if ((checkOutDates.compareTo(today)) < 0) {
                JOptionPane.showMessageDialog(null, "Invalid Date");
                valid = false;
            }
            else if (checkOutDates.compareTo(checkInDates) <= 0) {
                JOptionPane.showMessageDialog(null, "Invalid Date");
                valid = false;
            }


            if (!valid) {
                checkOutDate.setCalendar(null);
                return;
            }
        }
        
        
        if (checkInDates != null && checkOutDates != null && roomTypeGroup.getSelection() != null){
            if (checkOutDates.compareTo(checkInDates) <= 0) {
                JOptionPane.showMessageDialog(null, "Check out date cannot smaller than check in date.");
                checkOutDate.setCalendar(null);
                return;
            }
            
            roomNoCombo.removeAllItems();
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            String inString = sdf.format(checkInDates);
            String outString = sdf.format(checkOutDates);
//            System.out.println(inString + " " + outString);
            long diffInMillies = Math.abs(checkOutDates.getTime() - checkInDates.getTime());
            long diff = TimeUnit.DAYS.convert(diffInMillies, TimeUnit.MILLISECONDS) + 1;
            
            String price = df.format(((diff * 350.00) * 110 / 100) + (diff * 10));
            priceBox.setText(price);
            
            // Check filter
            String filter = "";
            if (seaRadio.isSelected()) {
                filter = "seaview";
            }
            else if (jungleRadio.isSelected()) {
                filter = "jungle";
            }
            else {
                JOptionPane.showMessageDialog(null, "Error weh");
            }
            
            // Check available room
            try {
                File room = new File("room.txt");
                File booking = new File("booking.txt");
                Scanner sRoom = new Scanner(room);
                String line = "", lineBooking = "";
                boolean availableStatus = true;
                ArrayList <String> fileLines = new ArrayList <String>();
                
                while(sRoom.hasNextLine()) {
                    Scanner sBooking = new Scanner(booking);
                    line = sRoom.nextLine();
                    String[] arrayRoom = line.split("\t");
                    availableStatus = true;
                    
                    if (!(arrayRoom[0].equals(filter))) {
//                        System.out.println(arrayRoom[0] + " " + filter);
                        continue;
                    }
                    
                    while(sBooking.hasNextLine()) {
                        lineBooking = sBooking.nextLine();
                        String[] arrayBooking = lineBooking.split("\t");
                        
                        // CheckIn
                        Date fileDate = new SimpleDateFormat("yyyy-MM-dd").parse(arrayBooking[3]);  
                        Date fileCheckOutDate = new SimpleDateFormat("yyyy-MM-dd").parse(arrayBooking[4]); 
                        
                        if (arrayRoom[1].equals(arrayBooking[2])) {
                            // Check in compare
                            int diffInCheckIn = checkInDates.compareTo(fileDate);
                            int diffInCheckIn1 = checkOutDates.compareTo(fileDate);
                            
                            // Check out compare
                            int diffInCheckout = checkInDates.compareTo(fileCheckOutDate);
                            int diffInCheckOut1 = checkOutDates.compareTo(fileCheckOutDate);
                            
//                            System.out.println(arrayBooking[3] + " " + arrayBooking[4]);
//                            System.out.println(checkInDates + " " + fileDate + " " + checkOutDates + " " + fileCheckOutDate);
//                            System.out.println(diffInCheckIn + " " + diffInCheckIn1 +" " + diffInCheckout + " " + diffInCheckOut1 + "\n");
                            if (diffInCheckIn >= 0 && diffInCheckOut1 < 0){
//                                System.out.println(diffInCheckIn + " " + diffInCheckIn1);
                                availableStatus = false;
                                break;
                            }
                            else if (diffInCheckout < 0 && diffInCheckout < 0) {
                                availableStatus = false;
                                break;
                            }
                        }
                    }
                    if (availableStatus) {
                        fileLines.add(arrayRoom[1]);
                    }
                    sBooking.close();
                }
                sRoom.close();
                
                for (String lineIndex : fileLines) {
                    roomNoCombo.addItem(lineIndex);
                }
            } 
            catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Error: " + e);
            }

  
            
        }
    }//GEN-LAST:event_jungleRadioActionPerformed

    private void checkInDatePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_checkInDatePropertyChange
        // TODO add your handling code here:
        Date checkInDates = checkInDate.getDate();
        Date checkOutDates = checkOutDate.getDate();
        
        Date today = new Date();
        boolean valid = true;
        
        if (checkInDates != null) {
            long diffMillies = Math.abs(checkInDates.getTime() - today.getTime());
            long diffs = TimeUnit.DAYS.convert(diffMillies, TimeUnit.MILLISECONDS);
            
            if ((checkInDates.compareTo(today)) <= 0) {
                JOptionPane.showMessageDialog(null, "Invalid Date");
                valid = false;
            }
            else if (diffs > 7) {
                JOptionPane.showMessageDialog(null, "Only can add room the coming 7 days");
                valid = false;
            }


            if (!valid) {
                checkInDate.setCalendar(null);
                return;
            }
        }
        
        
        if (checkInDates != null && checkOutDates != null && roomTypeGroup.getSelection() != null){
            if (checkOutDates.compareTo(checkInDates) <= 0) {
                JOptionPane.showMessageDialog(null, "Check out date cannot smaller than check in date.");
                checkOutDate.setCalendar(null);
                return;
            }
            
            roomNoCombo.removeAllItems();
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            String inString = sdf.format(checkInDates);
            String outString = sdf.format(checkOutDates);
//            System.out.println(inString + " " + outString);
            long diffInMillies = Math.abs(checkOutDates.getTime() - checkInDates.getTime());
            long diff = TimeUnit.DAYS.convert(diffInMillies, TimeUnit.MILLISECONDS);
            
            String price = df.format(((diff * 350.00) * 110 / 100) + (diff * 10));
            priceBox.setText(price);
            
            // Check filter
            String filter = "";
            if (seaRadio.isSelected()) {
                filter = "seaview";
            }
            else if (jungleRadio.isSelected()) {
                filter = "jungle";
            }
            else {
                JOptionPane.showMessageDialog(null, "Error weh");
            }
            
            // Check available room
            try {
                File room = new File("room.txt");
                File booking = new File("booking.txt");
                Scanner sRoom = new Scanner(room);
                String line = "", lineBooking = "";
                boolean availableStatus = true;
                ArrayList <String> fileLines = new ArrayList <String>();
                
                while(sRoom.hasNextLine()) {
                    Scanner sBooking = new Scanner(booking);
                    line = sRoom.nextLine();
                    String[] arrayRoom = line.split("\t");
                    availableStatus = true;
                    
                    if (!(arrayRoom[0].equals(filter))) {
//                        System.out.println(arrayRoom[0] + " " + filter);
                        continue;
                    }
                    
                    while(sBooking.hasNextLine()) {
                        lineBooking = sBooking.nextLine();
                        String[] arrayBooking = lineBooking.split("\t");
                        
                        // CheckIn
                        Date fileDate = new SimpleDateFormat("yyyy-MM-dd").parse(arrayBooking[3]);  
                        Date fileCheckOutDate = new SimpleDateFormat("yyyy-MM-dd").parse(arrayBooking[4]); 
                        
                        if (arrayRoom[1].equals(arrayBooking[2])) {
                            // Check in compare
                            int diffInCheckIn = checkInDates.compareTo(fileDate);
                            int diffInCheckIn1 = checkOutDates.compareTo(fileDate);
                            
                            // Check out compare
                            int diffInCheckout = checkInDates.compareTo(fileCheckOutDate);
                            int diffInCheckOut1 = checkOutDates.compareTo(fileCheckOutDate);
                            
//                            System.out.println(arrayBooking[3] + " " + arrayBooking[4]);
//                            System.out.println(checkInDates + " " + fileDate + " " + checkOutDates + " " + fileCheckOutDate);
//                            System.out.println(diffInCheckIn + " " + diffInCheckIn1 +" " + diffInCheckout + " " + diffInCheckOut1 + "\n");
                            if (diffInCheckIn >= 0 && diffInCheckOut1 < 0){
//                                System.out.println(diffInCheckIn + " " + diffInCheckIn1);
                                availableStatus = false;
                                break;
                            }
                            else if (diffInCheckout < 0 && diffInCheckout < 0) {
                                availableStatus = false;
                                break;
                            }
                        }
                    }
                    if (availableStatus) {
                        fileLines.add(arrayRoom[1]);
                    }
                    sBooking.close();
                }
                sRoom.close();
                
                for (String lineIndex : fileLines) {
                    roomNoCombo.addItem(lineIndex);
                }
            } 
            catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Error: " + e);
            }

  
            
        }
    }//GEN-LAST:event_checkInDatePropertyChange

    private void resetBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetBtnActionPerformed
        // TODO add your handling code here:
        custID.setText("");
        custName.setText("");
        roomTypeGroup.clearSelection();
        roomNoCombo.removeAllItems();
        checkInDate.setCalendar(null);
        checkOutDate.setCalendar(null);
        priceBox.setText("");
    }//GEN-LAST:event_resetBtnActionPerformed

    private void custIDKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_custIDKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_custIDKeyTyped

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddBooking.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddBooking.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddBooking.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddBooking.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AddBooking().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.toedter.calendar.JDateChooser checkInDate;
    private com.toedter.calendar.JDateChooser checkOutDate;
    private javax.swing.JTextField custID;
    private javax.swing.JTextField custName;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JRadioButton jungleRadio;
    private javax.swing.JTextField priceBox;
    private javax.swing.JButton resetBtn;
    private javax.swing.JComboBox<String> roomNoCombo;
    private javax.swing.ButtonGroup roomTypeGroup;
    private javax.swing.JRadioButton seaRadio;
    // End of variables declaration//GEN-END:variables
}
